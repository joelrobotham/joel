def ignoreResourcesFromDirectory(provider, directory) {
	def filter = provider.asNode()
	  .appendNode("filteredResources")
	  .appendNode("filter")
	// the following value needs to be unique
	filter.appendNode("id", String.valueOf(System.currentTimeMillis()))
	filter.appendNode("name")
	filter.appendNode("type", "30")
	def matcher = filter.appendNode("matcher")
	matcher.appendNode("id", "org.eclipse.ui.ide.multiFilter")
	matcher.appendNode("arguments", "1.0-projectRelativePath-matches-false-false-${directory}")
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: JRebelPlugin
  apply plugin: ReleasePlugin
  apply plugin: 'sonar'

  sonar {
    serverUrl = "http://localhost:9000"
  }
  def masterJobs = ['REAConsumerSearch-master-release']
 
  task duplicatePipeline << {
    println "Duplicating pipe from ${jenkinsHome}" 
    masterJobs.each {
        def masterJobDirLocation = "${jenkinsHome}/jobs/${it}"
        if (!file(masterJobDirLocation).exists()) {
          throw new IllegalArgumentException("Can't find job directory called ${masterJobDirLocation}")
        }
        def branchJob = it.replace("master", "sprint${sprintNumber}")
        println "Duplicating ${it} into ${branchJob}"
        def newJobDirLocation = "${jenkinsHome}/jobs/${branchJob}"
        file(newJobDirLocation).mkdirs()
        def originalJobConfig = file("${masterJobDirLocation}/config.xml").text
        def newJobConfigFile = file("${newJobDirLocation}/config.xml")
        newJobConfigFile.write(originalJobConfig.replace("master", "sprint${sprintNumber}"))
    }
  }
  
  buildscript {
    repositories {
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = "GitHub"
            addArtifactPattern 'http://cloud.github.com/downloads/bmuschko/gradle-tomcat-plugin/[module]-[revision].[ext]'
        }
        mavenCentral()
    }

    dependencies {
        def tomcatVersion = '6.0.28'
        classpath "org.apache.tomcat:catalina:${tomcatVersion}",
                  "org.apache.tomcat:coyote:${tomcatVersion}",
                  "org.apache.tomcat:jasper:${tomcatVersion}"
        classpath ':gradle-tomcat-plugin:0.7'
    }
}

tasks.eclipse.dependsOn tasks.cleanEclipse


//eclipse.project.file {
    //withXml { provider ->
//		ignoreResourcesFromDirectory(provider, "build")
 //   }
//}



  repositories {
      mavenCentral()
      flatDir name: 'localRepository', dirs: 'lib'
  }

  dependencies {
      testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.0-rc2'
      testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.2'
      testCompile group: 'junit', name: 'junit', version: '4.7'
  }
repositories {
    flatDir(name: 'fileRepo', dirs: "$projectDir/build/repo")
}
  project(':') {
    apply plugin: 'eclipse'
  }

  project (':impl') {
    apply plugin: 'code-quality'

  }

}



